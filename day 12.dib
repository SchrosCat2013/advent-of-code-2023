#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

# --- Day 12: Hot Springs ---
You finally reach the hot springs! You can see steam rising from secluded areas attached to the primary, ornate building.

As you turn to enter, the researcher stops you. "Wait - I thought you were looking for the hot springs, weren't you?" You indicate that this definitely looks like hot springs to you.

"Oh, sorry, common mistake! This is actually the onsen! The hot springs are next door."

You look in the direction the researcher is pointing and suddenly notice the massive metal helixes towering overhead. "This way!"

It only takes you a few more steps to reach the main gate of the massive fenced-off area containing the springs. You go through the gate and into a small administrative building.

"Hello! What brings you to the hot springs today? Sorry they're not very hot right now; we're having a lava shortage at the moment." You ask about the missing machine parts for Desert Island.

"Oh, all of Gear Island is currently offline! Nothing is being manufactured at the moment, not until we get more lava to heat our forges. And our springs. The springs aren't very springy unless they're hot!"

"Say, could you go up and see why the lava stopped flowing? The springs are too cold for normal operation, but we should be able to find one springy enough to launch you up there!"

There's just one problem - many of the springs have fallen into disrepair, so they're not actually sure which springs would even be safe to use! Worse yet, their condition records of which springs are damaged (your puzzle input) are also damaged! You'll need to help them repair the damaged records.

In the giant field just outside, the springs are arranged into rows. For each row, the condition records show every spring and whether it is operational (.) or damaged (#). This is the part of the condition records that is itself damaged; for some springs, it is simply unknown (?) whether the spring is operational or damaged.

However, the engineer that produced the condition records also duplicated some of this information in a different format! After the list of springs for a given row, the size of each contiguous group of damaged springs is listed in the order those groups appear in the row. This list always accounts for every damaged spring, and each number is the entire size of its contiguous group (that is, groups are always separated by at least one operational spring: #### would always be 4, never 2,2).

So, condition records with no unknown spring conditions might look like this:

```
#.#.### 1,1,3
.#...#....###. 1,1,3
.#.###.#.###### 1,3,1,6
####.#...#... 4,1,1
#....######..#####. 1,6,5
.###.##....# 3,2,1
```
However, the condition records are partially damaged; some of the springs' conditions are actually unknown (?). For example:

```
???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1
```

Equipped with this information, it is your job to figure out how many different arrangements of operational and broken springs fit the given criteria in each row.

In the first line (???.### 1,1,3), there is exactly one way separate groups of one, one, and three broken springs (in that order) can appear in that row: the first three unknown springs must be broken, then operational, then broken (#.#), making the whole row #.#.###.

The second line is more interesting: .??..??...?##. 1,1,3 could be a total of four different arrangements. The last ? must always be broken (to satisfy the final contiguous group of three broken springs), and each ?? must hide exactly one of the two broken springs. (Neither ?? could be both broken springs or they would form a single contiguous group of two; if that were true, the numbers afterward would have been 2,3 instead.) Since each ?? can either be #. or .#, there are four possible arrangements of springs.

The last line is actually consistent with ten different arrangements! Because the first number is 3, the first and second ? must both be . (if either were #, the first number would have to be 4 or higher). However, the remaining run of unknown spring conditions have many different ways they could hold groups of two and one broken springs:

```
?###???????? 3,2,1
.###.##.#...
.###.##..#..
.###.##...#.
.###.##....#
.###..##.#..
.###..##..#.
.###..##...#
.###...##.#.
.###...##..#
.###....##.#
```

In this example, the number of possible arrangements for each row is:

```
???.### 1,1,3 - 1 arrangement
.??..??...?##. 1,1,3 - 4 arrangements
?#?#?#?#?#?#?#? 1,3,1,6 - 1 arrangement
????.#...#... 4,1,1 - 1 arrangement
????.######..#####. 1,6,5 - 4 arrangements
?###???????? 3,2,1 - 10 arrangements
```

Adding all of the possible arrangement counts together produces a total of 21 arrangements.

For each row, count all of the different arrangements of operational and broken springs that meet the given criteria. What is the sum of those counts?

#!markdown

What we could do is for each entry, replace a single ? with both . and # and see if the line is still valid. If it is, then continue with the replacement. Otherwise, stop.

Return these as a sequence, then coun them.

#!fsharp

type SpringState = | Operational | Damaged | Unknown

type SpringRow = {
    state: SpringState array
    operationalGroups: int array 
}

let parseChar = function
    | '?' -> Unknown
    | '#' -> Operational
    | '.' -> Damaged
    | c -> raise <| InvalidOperationException $"Unknown spring state { c }"

let parseRow (input: string) =
    match input.Split(' ') with
    | [| a; b |] -> {
            state = a |> Seq.map parseChar |> Array.ofSeq
            operationalGroups = b.Split(',') |> Array.map int
        }
    | _ -> raise <| InvalidOperationException $"Could not parse input line { input }"

let sampleInput =
    [|
        "???.### 1,1,3"
        ".??..??...?##. 1,1,3"
        "?#?#?#?#?#?#?#? 1,3,1,6"
        "????.#...#... 4,1,1"
        "????.######..#####. 1,6,5"
        "?###???????? 3,2,1"
    |]
    |> Array.map parseRow

sampleInput

#!fsharp

let rec possibilityCouldBeValid (state: Span<SpringState>) (operationalGroups: Span<int>) =
    if operationalGroups.IsEmpty then not (state.Contains(Operational))
    else
        let first = state.IndexOfAny(Operational, Unknown)

        if first = -1 then false
        else if state.Length - first < operationalGroups[0] then false
        else if state[first] = Unknown then true
        else if state.Slice(first, operationalGroups[0]).Contains(Damaged) then false
        else if state.Length - first = operationalGroups[0] then operationalGroups.Length = 1
        else if state[first + operationalGroups[0]] = Operational then false
        else possibilityCouldBeValid (state.Slice(first + operationalGroups[0] + 1)) (operationalGroups.Slice(1))

[|
    "## 3" // false
    "### 3" // true
    "?? 3" // false
    "??? 3" // true
    ".### 3" // true
    "###. 3" // true
    "##.# 3" // false
    "#?#.# 3" // false
    ".#?#.# 3" // false
    "?##.# 3,1" // true
    ".?##.# 3,1" // true
    "####. 3" // false
    "##?#. 3" // false
    "###?. 3" // true
    "###.# 3" // false
    "#?#.# 3" // false
    "#...### 1,1,3" // false
    ".?.? 1,1" // true
    ".#.? 1,1" // true
|]
|> Array.map parseRow
|> Array.map (fun row -> possibilityCouldBeValid (row.state.AsSpan()) (row.operationalGroups.AsSpan()))

#!fsharp

let printState (state: SpringState array) =
    printfn "%A" <| Array.map (function | Unknown -> '?' | Operational -> '#' | Damaged -> '.') state

// Not purely functional. Mutates the state input array to avoid creating many intermediate
// arrays
let rec possibilities (state: SpringState array) (operationalGroups: int array) =
    seq {
        if possibilityCouldBeValid (state.AsSpan()) (operationalGroups.AsSpan())
        then
            match state |> Array.tryFindIndex ((=) Unknown) with
            | None -> yield Array.copy state
            | Some index ->
                state[index] <- Operational
                yield! possibilities state operationalGroups
                
                state[index] <- Damaged
                yield! possibilities state operationalGroups

                state[index] <- Unknown
    }

let possibilities' (input: SpringRow) =
    possibilities (Array.copy input.state) input.operationalGroups

sampleInput |> Array.map (possibilities' >> Seq.length)

#!fsharp

let part1 (input: SpringRow array) =
    input
    |> Seq.map (possibilities' >> Seq.length)
    |> Seq.sum

part1 sampleInput

#!fsharp

#!import shared.fs
open Shared

let challengeInput = readAndParseInput "day 12 input.txt" parseRow

part1 challengeInput

#!markdown

Part 1 answer: 7221

## --- Part Two ---
As you look out at the field of springs, you feel like there are way more springs than the condition records list. When you examine the records, you discover that they were actually folded up this whole time!

To unfold the records, on each row, replace the list of spring conditions with five copies of itself (separated by ?) and replace the list of contiguous groups of damaged springs with five copies of itself (separated by ,).

So, this row:

.# 1
Would become:

.#?.#?.#?.#?.# 1,1,1,1,1
The first line of the above example would become:

???.###????.###????.###????.###????.### 1,1,3,1,1,3,1,1,3,1,1,3,1,1,3
In the above example, after unfolding, the number of possible arrangements for some rows is now much larger:

```
???.### 1,1,3 - 1 arrangement
.??..??...?##. 1,1,3 - 16384 arrangements
?#?#?#?#?#?#?#? 1,3,1,6 - 1 arrangement
????.#...#... 4,1,1 - 16 arrangements
????.######..#####. 1,6,5 - 2500 arrangements
?###???????? 3,2,1 - 506250 arrangements
```

After unfolding, adding all of the possible arrangement counts together produces 525152.

Unfold your condition records; what is the new sum of possible arrangement counts?

#!fsharp

let repeat<'T> (count: int) (joiner: 'T) (input: 'T array) =
    seq {
        for i = 1 to count - 1 do
            yield! input
            yield joiner

        yield! input
    }
    |> Array.ofSeq

let expandRow (input: SpringRow) = {
    state = input.state |> repeat 5 Unknown
    operationalGroups = input.operationalGroups |> Seq.replicate 5 |> Array.concat
}

sampleInput
|> Array.map (expandRow >> possibilities' >> Seq.length)

#!fsharp

let part2 (input: SpringRow array) =
    input
    |> Seq.map (expandRow >> possibilities' >> Seq.length >> int64)
    |> Seq.sum

part2 sampleInput

#!markdown

That was taking too long for part 2. Lets see if we can speed it up - first try returning counts directly, rather than the matching arrays:

#!fsharp

// Not purely functional. Mutates the state input array to avoid creating many intermediate
// arrays
let rec possibilityCount (state: SpringState array) (operationalGroups: int array) =
    if possibilityCouldBeValid (state.AsSpan()) (operationalGroups.AsSpan())
    then
        match state |> Array.tryFindIndex ((=) Unknown) with
        | None -> 1L
        | Some index ->
            state[index] <- Operational
            let withOperational = possibilityCount state operationalGroups
            
            state[index] <- Damaged
            let withDamaged = possibilityCount state operationalGroups

            state[index] <- Unknown
            withOperational + withDamaged
    else 0L

let possibilityCount' (input: SpringRow) =
    possibilityCount (Array.copy input.state) input.operationalGroups

sampleInput
|> Array.map possibilityCount'

#!fsharp

sampleInput
|> Array.map (expandRow >> possibilityCount')

#!fsharp

challengeInput[0..9]
|> Array.map (expandRow >> possibilityCount')

#!markdown

Took 60 seconds to calculate 10 inputs. There are 1000 inputs, so that's 100 mins (~2 hours). Still too long.

#!fsharp

let findValidLocations (length: int) (state: SpringState array) =
    seq {
        for i = 0 to state.Length - length do
            let terminatedAtStart = i = 0 || state[i - 1] <> Operational
            let terminatedAtEnd = i = state.Length - length || state[i + length] <> Operational
            let containsNoDamaged = state[i..i+length-1] |> Array.contains Damaged |> not
            if terminatedAtStart && terminatedAtEnd && containsNoDamaged then i
    }

[|
    "### 3"
    "###. 3"
    ".### 3"
    ".###. 3"
    ".####. 3"
    "## 3"
    "##. 3"
    ".## 3"
    ".##. 3"
    "??? 3"
    "???. 3"
    ".??? 3"
    ".????. 3"
    ".?##?. 3"
|]
|> Array.map (parseRow >> (fun line -> findValidLocations line.operationalGroups[0] line.state))

#!fsharp

let rec maxGroupCount' (startPos: int) (current: int) (state: SpringState list) =
    if startPos >= state.Length then current
    else if startPos = state.Length - 1 then
        if state[startPos] <> Damaged then current + 1
        else current
    else
        if state[startPos] = Damaged || state[startPos+1] = Operational
        then maxGroupCount' (startPos+1) current state
        else maxGroupCount' (startPos+2) (current+1) state

let maxGroupCount = maxGroupCount' 0 0

[|
    " 0"
    ". 0"
    "# 1"
    "? 1"
    ".# 1"
    ".? 1"
    "#. 1"
    "?. 1"
    "#.# 2"
    "?.? 2"
    "#.. 1"
    "##. 1"

|]
|> Array.map (parseRow >> (fun line -> maxGroupCount line.state))

#!fsharp

let rec possibilityCount'' (state: SpringState array) (operationalGroups: int array) =
    match operationalGroups |> Seq.maxi with
    | None -> if state |> Array.contains Operational then 0L else 1L
    | Some (opi, len) ->
        // Optimisation - check if there are enough group endings to satisfy the remaining operational groups
        if state |> maxGroupCount < operationalGroups.Length then 0L
        else
            findValidLocations len state
            |> Seq.map (fun statei ->
                // This is an optimisation - don't check the second half if the first
                // half has zero possibilities. Cuts certain samples down considerably
                let tmp = (possibilityCount'' state[0..statei-2] operationalGroups[0..opi-1])
                if tmp = 0L
                then 0L
                else tmp * (possibilityCount'' state[statei+len+1..] operationalGroups[opi+1..])
                )
            |> Seq.sum

sampleInput
|> Array.map (fun row -> possibilityCount'' row.state row.operationalGroups)

#!fsharp

sampleInput
|> Array.map (expandRow >> fun row -> possibilityCount'' row.state row.operationalGroups)

#!markdown

Woot, that looks like it's working. Still took 0.6s for that, but let's try memoizing it. Memoizing didn't help - made it take significantly longer.

I needed to add in the zero-left-value optimization check, that greatly improved performance - 0.0s for sampleInput, 0.4s for first 10 entries of challengeInput

#!fsharp

challengeInput[50..55]
|> Array.map (expandRow >> fun row -> possibilityCount'' row.state row.operationalGroups)

#!fsharp

let part2 (reducer: SpringState array->int array->int64) (input: SpringRow array) =
    input
    |> Seq.map (expandRow >> fun row -> reducer row.state row.operationalGroups)
    |> Seq.sum

part2 possibilityCount'' sampleInput

#!markdown

What if we use the midpoint of the operational groups instead of the biggest group? This seems even better!

#!fsharp

let memo = Dictionary<(SpringState list * int list), int64>()

let rec possibilityCount''' (state: SpringState array) (operationalGroups: int array) =
    if Array.isEmpty operationalGroups
    then
        if state |> Array.contains Operational then 0L else 1L
    else
        match memo.TryGetValue((state |> List.ofArray, operationalGroups |> List.ofArray)) with
        | true, i -> i
        | false, _ ->
            let result =
                let opi = operationalGroups.Length / 2
                let len = operationalGroups[opi]

                // Optimisation - check if there are enough group endings to satisfy the remaining operational groups
                if state |> maxGroupCount < operationalGroups.Length then 0L
                else
                    findValidLocations len state
                    |> Seq.map (fun statei ->
                        // This is an optimisation - don't check the second half if the first
                        // half has zero possibilities. Cuts certain samples down considerably
                        let tmp = (possibilityCount''' state[0..statei-2] operationalGroups[0..opi-1])
                        if tmp = 0L
                        then 0L
                        else tmp * (possibilityCount''' state[statei+len+1..] operationalGroups[opi+1..])
                        )
                    |> Seq.sum

            memo.Add((state |> List.ofArray, operationalGroups |> List.ofArray), result)
            result

sampleInput
|> Array.map (fun row -> possibilityCount''' row.state row.operationalGroups)

#!fsharp

sampleInput
|> Array.map (expandRow >> fun row -> possibilityCount''' row.state row.operationalGroups)

#!fsharp

challengeInput[50..55]
|> Array.map (expandRow >> fun row -> possibilityCount''' row.state row.operationalGroups)

#!fsharp

challengeInput[0..100]
|> Array.map (expandRow >> fun row -> possibilityCount''' row.state row.operationalGroups)

#!fsharp

part2 possibilityCount''' challengeInput

#!fsharp

memo.Count

#!markdown

Learning - Arrays in F# do not implement an item-dependent GetHashCode. Different arrays with the same values will not work as entries into a Dictionary memo function. With the conversion to list, it reduces the time to run part2 to 17s. This is horribly inefficient as we are cloning many more copies of the input data than we need.

Perhaps I should stick to F# lists instead of arrays.

#!markdown

Answer was 7139671893722
