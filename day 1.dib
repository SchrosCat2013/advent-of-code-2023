#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

--- Day 1: Trebuchet?! ---

Something is wrong with global snow production, and you've been selected to take a look. The Elves have even given you a map; on it, they've used stars to mark the top fifty locations that are likely to be having problems.

You've been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

You try to ask why they can't just use a weather machine ("not powerful enough") and where they're even sending you ("the sky") and why your map looks mostly blank ("you sure ask a lot of questions") and hang on did you just say the sky ("of course, where do you think snow comes from") when you realize that the Elves are already loading you into a trebuchet ("please hold still, we need to strap you in").

As they're making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.

The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.

For example:

```
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
```
In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.

Consider your entire calibration document. What is the sum of all of the calibration values?

#!markdown

First, I need to read the input file. Can I use async in Polyglot notebooks? Yes

#!fsharp

let fileContent =
    File.ReadAllLinesAsync("day 1 input.txt")
    |> Async.AwaitTask
    |> Async.RunSynchronously

#!markdown

Loop through the lines, finding the first and last number, and adding them together. Easier to write the single-line function first.

String are enumerations of characters, so I can use standard collection (Seq) functions on a per-character basis.

Note: this function was generalized after doing part 2. I extracted the extractDigits function after doing part 2.

#!fsharp

let extractDigits =
    Seq.filter Char.IsDigit
    >> Seq.map (fun c -> int c - int '0')

let decodeCalibration (digits:int seq) =
    Seq.head digits * 10 + Seq.last digits

// Test, should return 58
extractDigits "cbv5dlakf3asdfl8bd" |> decodeCalibration

#!markdown

Finally enumerate the input and add them together. This is a map-reduce, there might be an operation that combines the two together in F#. Looks like the closest is Seq.mapFold, but mapReduce might be easier in this case.

#!fsharp

fileContent
|> Seq.map (extractDigits >> decodeCalibration)
|> Seq.reduce (+)

#!markdown

--- Part Two ---

Your calculation isn't quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid "digits".

Equipped with this new information, you now need to find the real first and last digit on each line. For example:

```
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
```
In this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.

What is the sum of all of the calibration values?

#!markdown

That's more annoying. Might be easier to work with strings than chars for the next part.

Maybe build a list of all valid inputs and findFirst / findLast? Perhaps start with a dictionary of mappings,
as we can pluck the keys directly for a search and use that for a conversion. It's called a map in f#.

Are there any zeroes in the input? No

#!fsharp

fileContent |> Seq.exists (fun line -> line.Contains "0")

#!markdown

Unfortunately, there isn't an IndexOfAny that takes a list of strings (though there is one that takes a list of chars).

We could solve this with Regex. It might also be possible to solve this with pattern matching in F#, or even recursion.

I will try this by building a function that checks a substring within the string for a match.

eg.
```substringMatches "wor" "hello world" 5 = false
substringMatches "wor" "hello world" 6 = true
```

We can use this to iterate over the input string, and pull out all the numbers we find.

#!fsharp

let conversions = Map [
    "1", 1
    "one", 1
    "2", 2
    "two", 2
    "3", 3
    "three", 3
    "4", 4
    "four", 4
    "5", 5
    "five", 5
    "6", 6
    "six", 6
    "7", 7
    "seven", 7
    "8", 8
    "eight", 8
    "9", 9
    "nine", 9
]

let rec extractNumbers (accum: int list) (input: string) =
    if input = ""
    then List.rev accum
    else
        match conversions |> Map.tryFindKey (fun key _ -> input.StartsWith key) with
        | Some key -> extractNumbers (conversions[key]::accum) (input.Substring 1)
        | None -> extractNumbers accum (input.Substring 1)

//Tests
[|
    extractNumbers [] "asoneob2vothreasdffourx"
    extractNumbers [] "as1ob2vothreasdf4x"
    extractNumbers [] "oneob2vothreasdf4xfive"
    extractNumbers [] "1ob2vothreasdf4x5"
    extractNumbers [] "54b2vothreasdf4x5"
    extractNumbers [] "7"
    extractNumbers [] "oneight"
    extractNumbers [] "eightwo"
|]

#!markdown

Test with the given sample 2 input:

#!fsharp

[|
    "two1nine"
    "eightwothree"
    "abcone2threexyz"
    "xtwone3four"
    "4nineeightseven2"
    "zoneight234"
    "7pqrstsixteen"
|]
|> Array.map (extractNumbers [] >> decodeCalibration)
|> Array.reduce (+)

#!fsharp

fileContent
|> Seq.map (extractNumbers [] >> decodeCalibration)
|> Seq.reduce (+)

#!markdown

This originally gave the answer 55362, but the Advent of Code doesn't accept that. That's because of values such as
"oneight", which can be parsed as 1, 8. My initial code solution was parsing just the 1.

Afterwards - Can I get the extractNumber function to use Spans instead of Strings (as the Substring call will be creating many unnecessary instances of a string?)

I tried switching the original method to using spans, however the Map.tryFindKey did not like being passed a span. Apparently this is a mismatch between a higher-order-function and spans which are byref structs. Need to remove the Map.tryFindKey call.

#!fsharp

let extractNumber (input: ReadOnlySpan<char>) =
    if input[0] >= '1' && input[0] <= '9'
    then Some (int input[0] - int '0')
    else if input.StartsWith("one") then Some 1
    else if input.StartsWith("two") then Some 2
    else if input.StartsWith("three") then Some 3
    else if input.StartsWith("four") then Some 4
    else if input.StartsWith("five") then Some 5
    else if input.StartsWith("six") then Some 6
    else if input.StartsWith("seven") then Some 7
    else if input.StartsWith("eight") then Some 8
    else if input.StartsWith("nine") then Some 9
    else None


let rec extractNumbers2 (accum: int list) (input: ReadOnlySpan<char>) =
    if input.IsEmpty
    then accum
    else
        let result =
            match extractNumber input with
            | Some number -> number::accum
            | none -> accum

        extractNumbers2 result (input.Slice 1)

let extractNumbers2' (input: string) = extractNumbers2 [] input

fileContent
|> Seq.map (extractNumbers2' >> decodeCalibration)
|> Seq.reduce (+)
